#include "gmp.h"
#include "jit.h"

void setupGMPFunctions(void) {
  clang_JitAddSymbol("mp_set_memory_functions", (void *)mp_set_memory_functions);
  clang_JitAddSymbol("mp_get_memory_functions", (void *)mp_get_memory_functions);
  /**************** Random number routines.  ****************/
  /* obsolete */
  clang_JitAddSymbol("gmp_randinit", (void *)gmp_randinit);
  clang_JitAddSymbol("gmp_randinit_default", (void *)gmp_randinit_default);
  clang_JitAddSymbol("gmp_randinit_lc_2exp", (void *)gmp_randinit_lc_2exp);
  clang_JitAddSymbol("gmp_randinit_lc_2exp_size", (void *)gmp_randinit_lc_2exp_size);
  clang_JitAddSymbol("gmp_randinit_mt", (void *)gmp_randinit_mt);
  clang_JitAddSymbol("gmp_randinit_set", (void *)gmp_randinit_set);
  clang_JitAddSymbol("gmp_randseed", (void *)gmp_randseed);
  clang_JitAddSymbol("gmp_randseed_ui", (void *)gmp_randseed_ui);
  clang_JitAddSymbol("gmp_randclear", (void *)gmp_randclear);
  clang_JitAddSymbol("gmp_urandomb_ui", (void *)gmp_urandomb_ui);
  clang_JitAddSymbol("gmp_urandomm_ui", (void *)gmp_urandomm_ui);
  /**************** Formatted output routines.  ****************/
  clang_JitAddSymbol("gmp_asprintf", (void *)gmp_asprintf);
  clang_JitAddSymbol("gmp_fprintf", (void *)gmp_fprintf);
  //clang_JitAddSymbol("gmp_obstack_printf", (void *)gmp_obstack_printf);
  //clang_JitAddSymbol("gmp_obstack_vprintf", (void *)gmp_obstack_vprintf);
  clang_JitAddSymbol("gmp_printf", (void *)gmp_printf);
  clang_JitAddSymbol("gmp_snprintf", (void *)gmp_snprintf);
  clang_JitAddSymbol("gmp_sprintf", (void *)gmp_sprintf);
  clang_JitAddSymbol("gmp_vasprintf", (void *)gmp_vasprintf);
  clang_JitAddSymbol("gmp_vfprintf", (void *)gmp_vfprintf);
  clang_JitAddSymbol("gmp_vprintf", (void *)gmp_vprintf);
  clang_JitAddSymbol("gmp_vsnprintf", (void *)gmp_vsnprintf);
  clang_JitAddSymbol("gmp_vsprintf", (void *)gmp_vsprintf);
  /**************** Formatted input routines.  ****************/
  clang_JitAddSymbol("gmp_fscanf", (void *)gmp_fscanf);
  clang_JitAddSymbol("gmp_scanf", (void *)gmp_scanf);
  clang_JitAddSymbol("gmp_sscanf", (void *)gmp_sscanf);
  clang_JitAddSymbol("gmp_vfscanf", (void *)gmp_vfscanf);
  clang_JitAddSymbol("gmp_vscanf", (void *)gmp_vscanf);
  clang_JitAddSymbol("gmp_vsscanf", (void *)gmp_vsscanf);
  /**************** Integer (i.e. Z) routines.  ****************/
  clang_JitAddSymbol("_mpz_realloc", (void *)_mpz_realloc);
  clang_JitAddSymbol("mpz_abs", (void *)mpz_abs);
  clang_JitAddSymbol("mpz_add", (void *)mpz_add);
  clang_JitAddSymbol("mpz_add_ui", (void *)mpz_add_ui);
  clang_JitAddSymbol("mpz_addmul", (void *)mpz_addmul);
  clang_JitAddSymbol("mpz_addmul_ui", (void *)mpz_addmul_ui);
  clang_JitAddSymbol("mpz_and", (void *)mpz_and);
  clang_JitAddSymbol("mpz_array_init", (void *)mpz_array_init);
  clang_JitAddSymbol("mpz_bin_ui", (void *)mpz_bin_ui);
  clang_JitAddSymbol("mpz_bin_uiui", (void *)mpz_bin_uiui);
  clang_JitAddSymbol("mpz_cdiv_q", (void *)mpz_cdiv_q);
  clang_JitAddSymbol("mpz_cdiv_q_2exp", (void *)mpz_cdiv_q_2exp);
  clang_JitAddSymbol("mpz_cdiv_q_ui", (void *)mpz_cdiv_q_ui);
  clang_JitAddSymbol("mpz_cdiv_qr", (void *)mpz_cdiv_qr);
  clang_JitAddSymbol("mpz_cdiv_qr_ui", (void *)mpz_cdiv_qr_ui);
  clang_JitAddSymbol("mpz_cdiv_r", (void *)mpz_cdiv_r);
  clang_JitAddSymbol("mpz_cdiv_r_2exp", (void *)mpz_cdiv_r_2exp);
  clang_JitAddSymbol("mpz_cdiv_r_ui", (void *)mpz_cdiv_r_ui);
  clang_JitAddSymbol("mpz_cdiv_ui", (void *)mpz_cdiv_ui);
  clang_JitAddSymbol("mpz_clear", (void *)mpz_clear);
  clang_JitAddSymbol("mpz_clears", (void *)mpz_clears);
  clang_JitAddSymbol("mpz_clrbit", (void *)mpz_clrbit);
  clang_JitAddSymbol("mpz_cmp", (void *)mpz_cmp);
  clang_JitAddSymbol("mpz_cmp_d", (void *)mpz_cmp_d);
  clang_JitAddSymbol("_mpz_cmp_si", (void *)_mpz_cmp_si);
  clang_JitAddSymbol("_mpz_cmp_ui", (void *)_mpz_cmp_ui);
  clang_JitAddSymbol("mpz_cmpabs", (void *)mpz_cmpabs);
  clang_JitAddSymbol("mpz_cmpabs_d", (void *)mpz_cmpabs_d);
  clang_JitAddSymbol("mpz_cmpabs_ui", (void *)mpz_cmpabs_ui);
  clang_JitAddSymbol("mpz_com", (void *)mpz_com);
  clang_JitAddSymbol("mpz_combit", (void *)mpz_combit);
  clang_JitAddSymbol("mpz_congruent_p", (void *)mpz_congruent_p);
  clang_JitAddSymbol("mpz_congruent_2exp_p", (void *)mpz_congruent_2exp_p);
  clang_JitAddSymbol("mpz_congruent_ui_p", (void *)mpz_congruent_ui_p);
  clang_JitAddSymbol("mpz_divexact", (void *)mpz_divexact);
  clang_JitAddSymbol("mpz_divexact_ui", (void *)mpz_divexact_ui);
  clang_JitAddSymbol("mpz_divisible_p", (void *)mpz_divisible_p);
  clang_JitAddSymbol("mpz_divisible_ui_p", (void *)mpz_divisible_ui_p);
  clang_JitAddSymbol("mpz_divisible_2exp_p", (void *)mpz_divisible_2exp_p);
  clang_JitAddSymbol("mpz_dump", (void *)mpz_dump);
  clang_JitAddSymbol("mpz_export", (void *)mpz_export);
  clang_JitAddSymbol("mpz_fac_ui", (void *)mpz_fac_ui);
  clang_JitAddSymbol("mpz_2fac_ui", (void *)mpz_2fac_ui);
  clang_JitAddSymbol("mpz_mfac_uiui", (void *)mpz_mfac_uiui);
  clang_JitAddSymbol("mpz_primorial_ui", (void *)mpz_primorial_ui);
  clang_JitAddSymbol("mpz_fdiv_q", (void *)mpz_fdiv_q);
  clang_JitAddSymbol("mpz_fdiv_q_2exp", (void *)mpz_fdiv_q_2exp);
  clang_JitAddSymbol("mpz_fdiv_q_ui", (void *)mpz_fdiv_q_ui);
  clang_JitAddSymbol("mpz_fdiv_qr", (void *)mpz_fdiv_qr);
  clang_JitAddSymbol("mpz_fdiv_qr_ui", (void *)mpz_fdiv_qr_ui);
  clang_JitAddSymbol("mpz_fdiv_r", (void *)mpz_fdiv_r);
  clang_JitAddSymbol("mpz_fdiv_r_2exp", (void *)mpz_fdiv_r_2exp);
  clang_JitAddSymbol("mpz_fdiv_r_ui", (void *)mpz_fdiv_r_ui);
  clang_JitAddSymbol("mpz_fdiv_ui", (void *)mpz_fdiv_ui);
  clang_JitAddSymbol("mpz_fib_ui", (void *)mpz_fib_ui);
  clang_JitAddSymbol("mpz_fib2_ui", (void *)mpz_fib2_ui);
  clang_JitAddSymbol("mpz_fits_sint_p", (void *)mpz_fits_sint_p);
  clang_JitAddSymbol("mpz_fits_slong_p", (void *)mpz_fits_slong_p);
  clang_JitAddSymbol("mpz_fits_sshort_p", (void *)mpz_fits_sshort_p);
  clang_JitAddSymbol("mpz_fits_uint_p", (void *)mpz_fits_uint_p);
  clang_JitAddSymbol("mpz_fits_ulong_p", (void *)mpz_fits_ulong_p);
  clang_JitAddSymbol("mpz_fits_ushort_p", (void *)mpz_fits_ushort_p);
  clang_JitAddSymbol("mpz_gcd", (void *)mpz_gcd);
  clang_JitAddSymbol("mpz_gcd_ui", (void *)mpz_gcd_ui);
  clang_JitAddSymbol("mpz_gcdext", (void *)mpz_gcdext);
  clang_JitAddSymbol("mpz_get_d", (void *)mpz_get_d);
  clang_JitAddSymbol("mpz_get_d_2exp", (void *)mpz_get_d_2exp);
  clang_JitAddSymbol("mpz_get_si", (void *)mpz_get_si);
  clang_JitAddSymbol("mpz_get_str", (void *)mpz_get_str);
  clang_JitAddSymbol("mpz_get_ui", (void *)mpz_get_ui);
  clang_JitAddSymbol("mpz_getlimbn", (void *)mpz_getlimbn );
  clang_JitAddSymbol("mpz_hamdist", (void *)mpz_hamdist );
  clang_JitAddSymbol("mpz_import", (void *)mpz_import);
  clang_JitAddSymbol("mpz_init", (void *)mpz_init);
  clang_JitAddSymbol("mpz_init2", (void *)mpz_init2);
  clang_JitAddSymbol("mpz_inits", (void *)mpz_inits);
  clang_JitAddSymbol("mpz_init_set", (void *)mpz_init_set);
  clang_JitAddSymbol("mpz_init_set_d", (void *)mpz_init_set_d);
  clang_JitAddSymbol("mpz_init_set_si", (void *)mpz_init_set_si);
  clang_JitAddSymbol("mpz_init_set_str", (void *)mpz_init_set_str);
  clang_JitAddSymbol("mpz_init_set_ui", (void *)mpz_init_set_ui);
  clang_JitAddSymbol("mpz_inp_raw", (void *)mpz_inp_raw);
  clang_JitAddSymbol("mpz_inp_str", (void *)mpz_inp_str);
  clang_JitAddSymbol("mpz_invert", (void *)mpz_invert);
  clang_JitAddSymbol("mpz_ior", (void *)mpz_ior);
  clang_JitAddSymbol("mpz_jacobi", (void *)mpz_jacobi);
  clang_JitAddSymbol("mpz_kronecker_si", (void *)mpz_kronecker_si);
  clang_JitAddSymbol("mpz_kronecker_ui", (void *)mpz_kronecker_ui);
  clang_JitAddSymbol("mpz_si_kronecker", (void *)mpz_si_kronecker);
  clang_JitAddSymbol("mpz_ui_kronecker", (void *)mpz_ui_kronecker);
  clang_JitAddSymbol("mpz_lcm", (void *)mpz_lcm);
  clang_JitAddSymbol("mpz_lcm_ui", (void *)mpz_lcm_ui);
  clang_JitAddSymbol("mpz_lucnum_ui", (void *)mpz_lucnum_ui);
  clang_JitAddSymbol("mpz_lucnum2_ui", (void *)mpz_lucnum2_ui);
  clang_JitAddSymbol("mpz_millerrabin", (void *)mpz_millerrabin);
  clang_JitAddSymbol("mpz_mod", (void *)mpz_mod);
  clang_JitAddSymbol("mpz_mul", (void *)mpz_mul);
  clang_JitAddSymbol("mpz_mul_2exp", (void *)mpz_mul_2exp);
  clang_JitAddSymbol("mpz_mul_si", (void *)mpz_mul_si);
  clang_JitAddSymbol("mpz_mul_ui", (void *)mpz_mul_ui);
  clang_JitAddSymbol("mpz_neg", (void *)mpz_neg);
  clang_JitAddSymbol("mpz_nextprime", (void *)mpz_nextprime);
  clang_JitAddSymbol("mpz_out_raw", (void *)mpz_out_raw);
  clang_JitAddSymbol("mpz_out_str", (void *)mpz_out_str);
  clang_JitAddSymbol("mpz_perfect_power_p", (void *)mpz_perfect_power_p);
  clang_JitAddSymbol("mpz_perfect_square_p", (void *)mpz_perfect_square_p);
  clang_JitAddSymbol("mpz_popcount", (void *)mpz_popcount );
  clang_JitAddSymbol("mpz_pow_ui", (void *)mpz_pow_ui);
  clang_JitAddSymbol("mpz_powm", (void *)mpz_powm);
  clang_JitAddSymbol("mpz_powm_sec", (void *)mpz_powm_sec);
  clang_JitAddSymbol("mpz_powm_ui", (void *)mpz_powm_ui);
  clang_JitAddSymbol("mpz_probab_prime_p", (void *)mpz_probab_prime_p);
  clang_JitAddSymbol("mpz_random", (void *)mpz_random);
  clang_JitAddSymbol("mpz_random2", (void *)mpz_random2);
  clang_JitAddSymbol("mpz_realloc2", (void *)mpz_realloc2);
  clang_JitAddSymbol("mpz_remove", (void *)mpz_remove );
  clang_JitAddSymbol("mpz_root", (void *)mpz_root);
  clang_JitAddSymbol("mpz_rootrem", (void *)mpz_rootrem);
  clang_JitAddSymbol("mpz_rrandomb", (void *)mpz_rrandomb);
  clang_JitAddSymbol("mpz_scan0", (void *)mpz_scan0 );
  clang_JitAddSymbol("mpz_scan1", (void *)mpz_scan1 );
  clang_JitAddSymbol("mpz_set", (void *)mpz_set);
  clang_JitAddSymbol("mpz_set_d", (void *)mpz_set_d);
  clang_JitAddSymbol("mpz_set_f", (void *)mpz_set_f);
  clang_JitAddSymbol("mpz_set_q", (void *)mpz_set_q);
  clang_JitAddSymbol("mpz_set_si", (void *)mpz_set_si);
  clang_JitAddSymbol("mpz_set_str", (void *)mpz_set_str);
  clang_JitAddSymbol("mpz_set_ui", (void *)mpz_set_ui);
  clang_JitAddSymbol("mpz_setbit", (void *)mpz_setbit);
  clang_JitAddSymbol("mpz_size", (void *)mpz_size);
  clang_JitAddSymbol("mpz_sizeinbase", (void *)mpz_sizeinbase);
  clang_JitAddSymbol("mpz_sqrt", (void *)mpz_sqrt);
  clang_JitAddSymbol("mpz_sqrtrem", (void *)mpz_sqrtrem);
  clang_JitAddSymbol("mpz_sub", (void *)mpz_sub);
  clang_JitAddSymbol("mpz_sub_ui", (void *)mpz_sub_ui);
  clang_JitAddSymbol("mpz_ui_sub", (void *)mpz_ui_sub);
  clang_JitAddSymbol("mpz_submul", (void *)mpz_submul);
  clang_JitAddSymbol("mpz_submul_ui", (void *)mpz_submul_ui);
  clang_JitAddSymbol("mpz_swap", (void *)mpz_swap);
  clang_JitAddSymbol("mpz_tdiv_ui", (void *)mpz_tdiv_ui);
  clang_JitAddSymbol("mpz_tdiv_q", (void *)mpz_tdiv_q);
  clang_JitAddSymbol("mpz_tdiv_q_2exp", (void *)mpz_tdiv_q_2exp);
  clang_JitAddSymbol("mpz_tdiv_q_ui", (void *)mpz_tdiv_q_ui);
  clang_JitAddSymbol("mpz_tdiv_qr", (void *)mpz_tdiv_qr);
  clang_JitAddSymbol("mpz_tdiv_qr_ui", (void *)mpz_tdiv_qr_ui);
  clang_JitAddSymbol("mpz_tdiv_r", (void *)mpz_tdiv_r);
  clang_JitAddSymbol("mpz_tdiv_r_2exp", (void *)mpz_tdiv_r_2exp);
  clang_JitAddSymbol("mpz_tdiv_r_ui", (void *)mpz_tdiv_r_ui);
  clang_JitAddSymbol("mpz_tstbit", (void *)mpz_tstbit);
  clang_JitAddSymbol("mpz_ui_pow_ui", (void *)mpz_ui_pow_ui);
  clang_JitAddSymbol("mpz_urandomb", (void *)mpz_urandomb);
  clang_JitAddSymbol("mpz_urandomm", (void *)mpz_urandomm);
  clang_JitAddSymbol("mpz_xor", (void *)mpz_xor);
  clang_JitAddSymbol("mpz_limbs_read", (void *)mpz_limbs_read );
  clang_JitAddSymbol("mpz_limbs_write", (void *)mpz_limbs_write );
  clang_JitAddSymbol("mpz_limbs_modify", (void *)mpz_limbs_modify );
  clang_JitAddSymbol("mpz_limbs_finish", (void *)mpz_limbs_finish);
  clang_JitAddSymbol("mpz_roinit_n", (void *)mpz_roinit_n );
  /**************** Rational (i.e. Q) routines.  ****************/
  clang_JitAddSymbol("mpq_abs", (void *)mpq_abs);
  clang_JitAddSymbol("mpq_add", (void *)mpq_add);
  clang_JitAddSymbol("mpq_canonicalize", (void *)mpq_canonicalize);
  clang_JitAddSymbol("mpq_clear", (void *)mpq_clear);
  clang_JitAddSymbol("mpq_clears", (void *)mpq_clears);
  clang_JitAddSymbol("mpq_cmp", (void *)mpq_cmp);
  clang_JitAddSymbol("_mpq_cmp_si", (void *)_mpq_cmp_si);
  clang_JitAddSymbol("_mpq_cmp_ui", (void *)_mpq_cmp_ui);
  clang_JitAddSymbol("mpq_cmp_z", (void *)mpq_cmp_z);
  clang_JitAddSymbol("mpq_div", (void *)mpq_div);
  clang_JitAddSymbol("mpq_div_2exp", (void *)mpq_div_2exp);
  clang_JitAddSymbol("mpq_equal", (void *)mpq_equal);
  clang_JitAddSymbol("mpq_get_num", (void *)mpq_get_num);
  clang_JitAddSymbol("mpq_get_den", (void *)mpq_get_den);
  clang_JitAddSymbol("mpq_get_d", (void *)mpq_get_d);
  clang_JitAddSymbol("mpq_get_str", (void *)mpq_get_str);
  clang_JitAddSymbol("mpq_init", (void *)mpq_init);
  clang_JitAddSymbol("mpq_inits", (void *)mpq_inits);
  clang_JitAddSymbol("mpq_inp_str", (void *)mpq_inp_str);
  clang_JitAddSymbol("mpq_inv", (void *)mpq_inv);
  clang_JitAddSymbol("mpq_mul", (void *)mpq_mul);
  clang_JitAddSymbol("mpq_mul_2exp", (void *)mpq_mul_2exp);
  clang_JitAddSymbol("mpq_neg", (void *)mpq_neg);
  clang_JitAddSymbol("mpq_out_str", (void *)mpq_out_str);
  clang_JitAddSymbol("mpq_set", (void *)mpq_set);
  clang_JitAddSymbol("mpq_set_d", (void *)mpq_set_d);
  clang_JitAddSymbol("mpq_set_den", (void *)mpq_set_den);
  clang_JitAddSymbol("mpq_set_f", (void *)mpq_set_f);
  clang_JitAddSymbol("mpq_set_num", (void *)mpq_set_num);
  clang_JitAddSymbol("mpq_set_si", (void *)mpq_set_si);
  clang_JitAddSymbol("mpq_set_str", (void *)mpq_set_str);
  clang_JitAddSymbol("mpq_set_ui", (void *)mpq_set_ui);
  clang_JitAddSymbol("mpq_set_z", (void *)mpq_set_z);
  clang_JitAddSymbol("mpq_sub", (void *)mpq_sub);
  clang_JitAddSymbol("mpq_swap", (void *)mpq_swap);
  /**************** Float (i.e. F) routines.  ****************/
  clang_JitAddSymbol("mpf_abs", (void *)mpf_abs);
  clang_JitAddSymbol("mpf_add", (void *)mpf_add);
  clang_JitAddSymbol("mpf_add_ui", (void *)mpf_add_ui);
  clang_JitAddSymbol("mpf_ceil", (void *)mpf_ceil);
  clang_JitAddSymbol("mpf_clear", (void *)mpf_clear);
  clang_JitAddSymbol("mpf_clears", (void *)mpf_clears);
  clang_JitAddSymbol("mpf_cmp", (void *)mpf_cmp);
  clang_JitAddSymbol("mpf_cmp_z", (void *)mpf_cmp_z);
  clang_JitAddSymbol("mpf_cmp_d", (void *)mpf_cmp_d);
  clang_JitAddSymbol("mpf_cmp_si", (void *)mpf_cmp_si);
  clang_JitAddSymbol("mpf_cmp_ui", (void *)mpf_cmp_ui);
  clang_JitAddSymbol("mpf_div", (void *)mpf_div);
  clang_JitAddSymbol("mpf_div_2exp", (void *)mpf_div_2exp);
  clang_JitAddSymbol("mpf_div_ui", (void *)mpf_div_ui);
  clang_JitAddSymbol("mpf_dump", (void *)mpf_dump);
  clang_JitAddSymbol("mpf_eq", (void *)mpf_eq);
  clang_JitAddSymbol("mpf_fits_sint_p", (void *)mpf_fits_sint_p);
  clang_JitAddSymbol("mpf_fits_slong_p", (void *)mpf_fits_slong_p);
  clang_JitAddSymbol("mpf_fits_sshort_p", (void *)mpf_fits_sshort_p);
  clang_JitAddSymbol("mpf_fits_uint_p", (void *)mpf_fits_uint_p);
  clang_JitAddSymbol("mpf_fits_ulong_p", (void *)mpf_fits_ulong_p);
  clang_JitAddSymbol("mpf_fits_ushort_p", (void *)mpf_fits_ushort_p);
  clang_JitAddSymbol("mpf_floor", (void *)mpf_floor);
  clang_JitAddSymbol("mpf_get_d", (void *)mpf_get_d);
  clang_JitAddSymbol("mpf_get_d_2exp", (void *)mpf_get_d_2exp);
  clang_JitAddSymbol("mpf_get_default_prec", (void *)mpf_get_default_prec );
  clang_JitAddSymbol("mpf_get_prec", (void *)mpf_get_prec );
  clang_JitAddSymbol("mpf_get_si", (void *)mpf_get_si);
  clang_JitAddSymbol("mpf_get_str", (void *)mpf_get_str);
  clang_JitAddSymbol("mpf_get_ui", (void *)mpf_get_ui);
  clang_JitAddSymbol("mpf_init", (void *)mpf_init);
  clang_JitAddSymbol("mpf_init2", (void *)mpf_init2);
  clang_JitAddSymbol("mpf_inits", (void *)mpf_inits);
  clang_JitAddSymbol("mpf_init_set", (void *)mpf_init_set);
  clang_JitAddSymbol("mpf_init_set_d", (void *)mpf_init_set_d);
  clang_JitAddSymbol("mpf_init_set_si", (void *)mpf_init_set_si);
  clang_JitAddSymbol("mpf_init_set_str", (void *)mpf_init_set_str);
  clang_JitAddSymbol("mpf_init_set_ui", (void *)mpf_init_set_ui);
  clang_JitAddSymbol("mpf_inp_str", (void *)mpf_inp_str);
  clang_JitAddSymbol("mpf_integer_p", (void *)mpf_integer_p);
  clang_JitAddSymbol("mpf_mul", (void *)mpf_mul);
  clang_JitAddSymbol("mpf_mul_2exp", (void *)mpf_mul_2exp);
  clang_JitAddSymbol("mpf_mul_ui", (void *)mpf_mul_ui);
  clang_JitAddSymbol("mpf_neg", (void *)mpf_neg);
  clang_JitAddSymbol("mpf_out_str", (void *)mpf_out_str);
  clang_JitAddSymbol("mpf_pow_ui", (void *)mpf_pow_ui);
  clang_JitAddSymbol("mpf_random2", (void *)mpf_random2);
  clang_JitAddSymbol("mpf_reldiff", (void *)mpf_reldiff);
  clang_JitAddSymbol("mpf_set", (void *)mpf_set);
  clang_JitAddSymbol("mpf_set_d", (void *)mpf_set_d);
  clang_JitAddSymbol("mpf_set_default_prec", (void *)mpf_set_default_prec);
  clang_JitAddSymbol("mpf_set_prec", (void *)mpf_set_prec);
  clang_JitAddSymbol("mpf_set_prec_raw", (void *)mpf_set_prec_raw);
  clang_JitAddSymbol("mpf_set_q", (void *)mpf_set_q);
  clang_JitAddSymbol("mpf_set_si", (void *)mpf_set_si);
  clang_JitAddSymbol("mpf_set_str", (void *)mpf_set_str);
  clang_JitAddSymbol("mpf_set_ui", (void *)mpf_set_ui);
  clang_JitAddSymbol("mpf_set_z", (void *)mpf_set_z);
  clang_JitAddSymbol("mpf_size", (void *)mpf_size);
  clang_JitAddSymbol("mpf_sqrt", (void *)mpf_sqrt);
  clang_JitAddSymbol("mpf_sqrt_ui", (void *)mpf_sqrt_ui);
  clang_JitAddSymbol("mpf_sub", (void *)mpf_sub);
  clang_JitAddSymbol("mpf_sub_ui", (void *)mpf_sub_ui);
  clang_JitAddSymbol("mpf_swap", (void *)mpf_swap);
  clang_JitAddSymbol("mpf_trunc", (void *)mpf_trunc);
  clang_JitAddSymbol("mpf_ui_div", (void *)mpf_ui_div);
  clang_JitAddSymbol("mpf_ui_sub", (void *)mpf_ui_sub);
  clang_JitAddSymbol("mpf_urandomb", (void *)mpf_urandomb);
  /************ Low level positive-integer (i.e. N) routines.  ************/
  /* This is ugly, but we need to make user calls reach the prefixed function. */
  clang_JitAddSymbol("mpn_add", (void *)mpn_add );
  clang_JitAddSymbol("mpn_add_1", (void *)mpn_add_1 );
  clang_JitAddSymbol("mpn_add_n", (void *)mpn_add_n );
  clang_JitAddSymbol("mpn_addmul_1", (void *)mpn_addmul_1 );
  clang_JitAddSymbol("mpn_cmp", (void *)mpn_cmp);
  clang_JitAddSymbol("mpn_zero_p", (void *)mpn_zero_p);
  clang_JitAddSymbol("mpn_divexact_1", (void *)mpn_divexact_1);
  clang_JitAddSymbol("mpn_divexact_by3c", (void *)mpn_divexact_by3c );
  clang_JitAddSymbol("mpn_divrem", (void *)mpn_divrem );
  clang_JitAddSymbol("mpn_divrem_1", (void *)mpn_divrem_1 );
  clang_JitAddSymbol("mpn_divrem_2", (void *)mpn_divrem_2 );
  clang_JitAddSymbol("mpn_div_qr_1", (void *)mpn_div_qr_1 );
  clang_JitAddSymbol("mpn_div_qr_2", (void *)mpn_div_qr_2 );
  clang_JitAddSymbol("mpn_gcd", (void *)mpn_gcd );
  clang_JitAddSymbol("mpn_gcd_11", (void *)mpn_gcd_11 );
  clang_JitAddSymbol("mpn_gcd_1", (void *)mpn_gcd_1 );
  clang_JitAddSymbol("mpn_gcdext_1", (void *)mpn_gcdext_1 );
  clang_JitAddSymbol("mpn_gcdext", (void *)mpn_gcdext );
  clang_JitAddSymbol("mpn_get_str", (void *)mpn_get_str);
  clang_JitAddSymbol("mpn_hamdist", (void *)mpn_hamdist );
  clang_JitAddSymbol("mpn_lshift", (void *)mpn_lshift );
  clang_JitAddSymbol("mpn_mod_1", (void *)mpn_mod_1 );
  clang_JitAddSymbol("mpn_mul", (void *)mpn_mul );
  clang_JitAddSymbol("mpn_mul_1", (void *)mpn_mul_1 );
  clang_JitAddSymbol("mpn_mul_n", (void *)mpn_mul_n);
  clang_JitAddSymbol("mpn_sqr", (void *)mpn_sqr);
  clang_JitAddSymbol("mpn_neg", (void *)mpn_neg );
  clang_JitAddSymbol("mpn_com", (void *)mpn_com);
  clang_JitAddSymbol("mpn_perfect_square_p", (void *)mpn_perfect_square_p);
  clang_JitAddSymbol("mpn_perfect_power_p", (void *)mpn_perfect_power_p);
  clang_JitAddSymbol("mpn_popcount", (void *)mpn_popcount );
  clang_JitAddSymbol("mpn_pow_1", (void *)mpn_pow_1 );
  /* undocumented now, but retained here for upward compatibility */
  clang_JitAddSymbol("mpn_preinv_mod_1", (void *)mpn_preinv_mod_1 );
  clang_JitAddSymbol("mpn_random", (void *)mpn_random);
  clang_JitAddSymbol("mpn_random2", (void *)mpn_random2);
  clang_JitAddSymbol("mpn_rshift", (void *)mpn_rshift );
  clang_JitAddSymbol("mpn_scan0", (void *)mpn_scan0 );
  clang_JitAddSymbol("mpn_scan1", (void *)mpn_scan1 );
  clang_JitAddSymbol("mpn_set_str", (void *)mpn_set_str );
  clang_JitAddSymbol("mpn_sizeinbase", (void *)mpn_sizeinbase);
  clang_JitAddSymbol("mpn_sqrtrem", (void *)mpn_sqrtrem );
  clang_JitAddSymbol("mpn_sub", (void *)mpn_sub );
  clang_JitAddSymbol("mpn_sub_1", (void *)mpn_sub_1 );
  clang_JitAddSymbol("mpn_sub_n", (void *)mpn_sub_n );
  clang_JitAddSymbol("mpn_submul_1", (void *)mpn_submul_1 );
  clang_JitAddSymbol("mpn_tdiv_qr", (void *)mpn_tdiv_qr);
  clang_JitAddSymbol("mpn_and_n", (void *)mpn_and_n);
  clang_JitAddSymbol("mpn_andn_n", (void *)mpn_andn_n);
  clang_JitAddSymbol("mpn_nand_n", (void *)mpn_nand_n);
  clang_JitAddSymbol("mpn_ior_n", (void *)mpn_ior_n);
  clang_JitAddSymbol("mpn_iorn_n", (void *)mpn_iorn_n);
  clang_JitAddSymbol("mpn_nior_n", (void *)mpn_nior_n);
  clang_JitAddSymbol("mpn_xor_n", (void *)mpn_xor_n);
  clang_JitAddSymbol("mpn_xnor_n", (void *)mpn_xnor_n);
  clang_JitAddSymbol("mpn_copyi", (void *)mpn_copyi);
  clang_JitAddSymbol("mpn_copyd", (void *)mpn_copyd);
  clang_JitAddSymbol("mpn_zero", (void *)mpn_zero);
  clang_JitAddSymbol("mpn_cnd_add_n", (void *)mpn_cnd_add_n );
  clang_JitAddSymbol("mpn_cnd_sub_n", (void *)mpn_cnd_sub_n );
  clang_JitAddSymbol("mpn_sec_add_1", (void *)mpn_sec_add_1 );
  clang_JitAddSymbol("mpn_sec_add_1_itch", (void *)mpn_sec_add_1_itch );
  clang_JitAddSymbol("mpn_sec_sub_1", (void *)mpn_sec_sub_1 );
  clang_JitAddSymbol("mpn_sec_sub_1_itch", (void *)mpn_sec_sub_1_itch );
  clang_JitAddSymbol("mpn_cnd_swap", (void *)mpn_cnd_swap);
  clang_JitAddSymbol("mpn_sec_mul", (void *)mpn_sec_mul);
  clang_JitAddSymbol("mpn_sec_mul_itch", (void *)mpn_sec_mul_itch );
  clang_JitAddSymbol("mpn_sec_sqr", (void *)mpn_sec_sqr);
  clang_JitAddSymbol("mpn_sec_sqr_itch", (void *)mpn_sec_sqr_itch );
  clang_JitAddSymbol("mpn_sec_powm", (void *)mpn_sec_powm);
  clang_JitAddSymbol("mpn_sec_powm_itch", (void *)mpn_sec_powm_itch );
  clang_JitAddSymbol("mpn_sec_tabselect", (void *)mpn_sec_tabselect);
  clang_JitAddSymbol("mpn_sec_div_qr", (void *)mpn_sec_div_qr );
  clang_JitAddSymbol("mpn_sec_div_qr_itch", (void *)mpn_sec_div_qr_itch );
  clang_JitAddSymbol("mpn_sec_div_r", (void *)mpn_sec_div_r);
  clang_JitAddSymbol("mpn_sec_div_r_itch", (void *)mpn_sec_div_r_itch );
  clang_JitAddSymbol("mpn_sec_invert", (void *)mpn_sec_invert);
  clang_JitAddSymbol("mpn_sec_invert_itch", (void *)mpn_sec_invert_itch );
}

